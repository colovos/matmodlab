#!/usr/bin/env python
import os
import sys
import random
import argparse

from _setup import *
from project import SPLASH, ROOT_D, PKG_D
from core.runtime import set_runtime_opt
from core.mmlio import FileNotFoundError

def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]
    parser = argparse.ArgumentParser(prog="mmd")
    parser.add_argument("-v", default=1, type=int,
       help="Verbosity [default: %(default)s]")
    parser.add_argument("--dbg", default=False, action="store_true",
       help="Debug mode [default: %(default)s]")
    parser.add_argument("--sqa", default=False, action="store_true",
       help="SQA mode [default: %(default)s]")
    parser.add_argument("-V", default=False, action="store_true",
       help="Launch simulation visualizer on completion [default: %(default)s]")
    parser.add_argument("-I", default=os.getcwd(), help=argparse.SUPPRESS)
    parser.add_argument("-B", metavar="material",
        help="Build material model[s] before running [default: %(default)s]")
    parser.add_argument("source", help="Input file")
    args = parser.parse_args(argv)

    # set runtime options
    set_runtime_opt("debug", args.dbg)
    set_runtime_opt("sqa", args.sqa)
    # directory to look for hrefs and other files
    set_runtime_opt("I", args.I)

    # add the working directory to the Python path
    sys.path.insert(0, os.getcwd())

    if args.B:
        mtl = args.B.strip()
        from core.builder import Builder
        verbosity = 3 if args.v > 1 else 0
        if os.path.isfile(os.path.join(PKG_D, "{0}.so".format(mtl))):
            os.remove(os.path.join(PKG_D, "{0}.so".format(mtl)))
        b = Builder.build_material(mtl, verbosity=verbosity)

    if not os.path.isfile(args.source):
        raise FileNotFoundError(args.source)
    exec(compile(open(args.source, "rb").read(), args.source, 'exec'))

    if args.v:
        # a fun quote to end with
        ol = open(os.path.join(ROOT_D, "utils/zol")).readlines()
        sys.stdout.write("\n" + ol[random.randint(0, len(ol)-1)])

    if args.V and output:
        from viz.plot2d import create_model_plot
        create_model_plot(output)

if __name__ == "__main__":
    main()
