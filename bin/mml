#!/usr/bin/env python
# set up python environment
import os
import sys
from subprocess import Popen
from os.path import dirname, isfile, join, realpath, split

D, F = split(realpath(__file__))
sys.path.insert(0, dirname(D))
from utils.misc import load_file
from core.product import ROOT_D, CORE_D, UTL_D

# --- check prereqs
errors = []
(major, minor, micro, relev, ser) = sys.version_info
if (major != 3 and major != 2) or (major == 2 and minor < 7):
    errors.append("python >= 2.7 required")
    errors.append("  {0} provides {1}.{2}.{3}".format(
        sys.executable, major, minor, micro))

# --- numpy
try: import numpy
except ImportError: errors.append("numpy not found")

# --- scipy
try: import scipy
except ImportError: errors.append("scipy not found")

# check prerequisites
if errors:
    sys.exit("*** error: matmodlab could not run due to the "
             "following errors:\n  {0}".format("\n  ".join(errors)))

def sorter(a):
    if isfile(a): return 0
    return 1

def getf(k):
    try:
	return {"build": join(CORE_D, "builder.py"),
                "clean": join(UTL_D, "mmlclean.py"),
                "config": join(CORE_D, "configurer.py"),
                "convert": join(UTL_D, "mmlconv.py"),
                "run": None,
                "test": join(CORE_D, "tester.py"),
                "view": join(CORE_D, "plotter.py")}[k]
    except KeyError:
	sys.exit("mml: '{0}' is not a mml command.  See 'mml -h'.".format(k))

usage = """\
usage: mml [-h|help] <command> [<args>]

The mml commands are:
  build    Build fortran libraries
  clean    Clean simulation and build files generated by matmodlab
  config   Run the cofiguration tool
  convert  Convert matmodlab 1.x xml input to matmodlab 2.x python input (limited)
  run      Run a simulation
  test     Run tests
  view     Launch the matmodlab viewer

See 'mml help <command>' to read about a specific subcommand.
"""


def main(argv=None):
    if argv is None:
        argv = sys.argv[1:]

    # if no arguments given, exit
    if not argv:
        sys.exit(usage)

    # get first argument, check if help requested
    x, argv = argv[0], argv[1:]
    if x in ("-h", "--help"):
        sys.exit(usage)

    # check for command specific help
    if x == "help":
        if not argv:
            sys.exit(usage)
        x, argv = argv[0], ["-h"]

    # at this point, x is a mml command.  get the specific file to load
    f = getf(x)
    if f:
        sys.argv = ["mml {0}".format(x)] + argv
        module = load_file(f)
        sys.exit(module.main(argv=argv))

    # to get to this point, the command was 'run'. we use the python
    # interpreter to call the file argument directly. first, we format argv
    assert x == "run"
    if not isfile(argv[0]):
        sys.exit("*** error: mml run: {0}: no such file".format(argv[0]))
    elif not argv or argv[0] in ("-h", "--help"):
        f = join(ROOT_D, "matmodlab.py")
        sys.argv = ["mml {0}".format(x)] + ["-h"]
        module = load_file(f)
        sys.exit(module.main(argv=sys.argv))


    # reorder argv so that files are first
    argv = sorted(argv, key=sorter)
    command = "{0} {1}".format(sys.executable, " ".join(argv))

    # set the environment in which the simulation will be run
    environment = {}
    p = os.getenv("PYTHONPATH", "").split(os.pathsep)
    p.insert(0, ROOT_D)
    environment["PYTHONPATH"] = os.pathsep.join(p)
    p = os.getenv("PATH").split(os.pathsep)
    p.append(D)
    environment["PATH"] = os.pathsep.join(p)
    environment["FC"] = os.getenv("FC", "gfortran")

    proc = Popen(command.split(), env=environment)
    proc.wait()
    sys.exit(proc.returncode)


if __name__ == "__main__":
    main()
