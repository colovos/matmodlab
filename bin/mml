#!/bin/bash
# set up python environment
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROOT="$(dirname "$DIR")"
export PYTHONPATH=$ROOT

usage()
{
cat << EOF
usage: mml [-h] <command> [<args>]

The mml commands are:
  build    Build fortran libraries
  clean    Clean simulation and build files generated by matmodlab
  run      Run a simulation
  view     Launch the matmodlab viewer

See 'mml help <command>' to read about a specific subcommand.

EOF
}

# option parsing - for now, only -h is supported
while getopts "h" OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

# positional parameters
COMMAND="$1"
shift
PROG=$DIR/mml-$COMMAND
case $COMMAND in
    build)
	;;
    clean)
	;;
    config)
	;;
    "test")
	;;
    view)
	;;
    help)
	COMMAND="$1"
	set -- "--help"
	if [ -z "$COMMAND" ];
	then
	    usage
	    exit
	fi
	if [ "$COMMAND" ==  run ];
        then
	    # run typically operates directly on a python file - which calls
	    # clparse through matmodlab.py, here we call clparse directly
	    PROG="/usr/bin/env python $ROOT/utils/clparse.py"
	else
	    PROG="$DIR/mml-$COMMAND"
	fi
	;;
    *)
	echo \'"$COMMAND"\': unkown command
	usage
	exit 1
	;;
esac

if [ -z "$PROG" ];
then
    usage
    exit
fi

$PROG "$@"
