#!/usr/bin/env python
"""Provides a recipe for computing the maximum error between the expected
pressure vs. volume strain slope and the simulated.

"""
import os
import sys
import numpy as np

from exoreader import ExodusIIReader

def main(*argv):

    vars_to_get = ("STRAIN_XX", "STRAIN_YY", "STRAIN_ZZ",
                   "STRESS_XX", "STRESS_YY", "STRESS_ZZ")

    exof, aux = argv[:2]
    # read in baseline data
    auxhead = open(aux).readline().split()
    auxdat = np.loadtxt(aux, skiprows=1)
    I = [auxhead.index(var) for var in vars_to_get]
    baseevol = auxdat[:, I[0]] + auxdat[:, I[1]] + auxdat[:, I[2]]
    basepress = (auxdat[:, I[3]] + auxdat[:, I[4]] + auxdat[:, I[5]]) / 3.
    basetime = auxdat[:, auxhead.index("TIME")]

    # read in output data
    exof = ExodusIIReader.new_from_exofile(exof)
    simdat = np.transpose([exof.get_elem_var_time(var, 0) for var in vars_to_get])
    simtime = exof.get_all_times()
    simevol = simdat[:, 0] + simdat[:, 1] + simdat[:, 2]
    simpress = -(simdat[:, 3] + simdat[:, 4] + simdat[:, 5]) / 3.

    # do the comparison
    n = basetime.shape[0]
    t0 = max(np.amin(basetime), np.amin(simtime))
    tf = min(np.amax(basetime), np.amax(simtime))
    evb = lambda x: np.interp(x, basetime, baseevol)
    evs = lambda x: np.interp(x, simtime, simevol)

    base = lambda x: np.interp(evb(x), baseevol, basepress)
    comp = lambda x: np.interp(evs(x), simevol, simpress)

    rms = np.sqrt(np.mean([(base(t) - comp(t)) ** 2
                           for t in np.linspace(t0, tf, n)]))
    dnom = np.amax(np.abs(simpress))
    if dnom < 1.e-12: dnom = 1.
    error = rms / dnom

    print error

    return 0

if __name__ == "__main__":
    sys.exit(main(*sys.argv[1:]))
