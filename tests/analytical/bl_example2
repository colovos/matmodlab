#!/usr/bin/env python
import os
import numpy

testname = os.path.splitext(os.path.basename(__file__))[0]

#
# The acronym BL stands for "Brannon, Leelavanichkul" with reference to
# the paper "A multi-stage return algorithm for solving the classical
# damage component of constitutive models for rocks, ceramics, and other
# rock-like media", published on 25 September 2009
#
# This file generates the analytical solution for example #2 in that paper.
#
# The material parameters are set as:
#   Yield in shear  = 165 MPa
#   shear modulus   = 79 GPa
#   poisson's ratio = 1/3  (not technically needed for simulation)
#

def get_stress(t):
    # this function evaluates equations #59, #60, and #61
    # !!!! Be Aware !!!
    # In equation #60 in the part "if 1 < t <= 2" a minus
    #   sign should preceed the entire fraction.
    # In equation #61, also in the part "if 1 < t <= 2"
    #   the last minus sign in the numerator should be a
    #   plus sign.
    if 0.0 <= t <= 0.20097:
        sig11 = -474.0 * t
        sig22 = -474.0 * t
        sig33 = 948.0 * t
    elif 0.20097 < t <= 1.0:
        sig11 = -95.26
        sig22 = -95.26
        sig33 = 190.5
    elif 1.0 < t <= 2.0:
        a = numpy.exp(12.33 * t)
        denom = 1.0 + 0.00001712 * a
        sig11 = (189.4 + 0.1704 * numpy.sqrt(a) - 0.003242 * a) / denom
        sig22 = -(76.87 + 1.443 * numpy.sqrt(a) - 0.001316 * a) / denom
        sig33 = (-112.5 + 1.272 * numpy.sqrt(a) + 0.001926 * a) / denom
    elif 2.0 < t:
        sig11 = 189.4
        sig22 = 76.87
        sig33 = 112.5
    else:
        raise Exception("Time was negative: t={0:.6e}".format(t))

    return sig11 * 1.0e6, sig22 * 1.0e6, sig33 * 1.0e6, 0.0, 0.0, 0.0


if __name__ == '__main__':
    print("Starting processing")

    # Yield in shear, shear modulus, and poisson_ratio
    Y = 165.0e6
    G = 79.0e9
    nu = 1.0 / 3.0

    # K and G are used for parameterization
    K = 2.0 * G * (1.0 + nu) / (3.0 * (1.0 - 2.0 * nu))

    # Convert Y from 'yield in shear' to 'yield in tension'
    Y = Y * numpy.sqrt(3.0)

    # Write the parameters file
    with open(testname + "_parameters.txt", 'w') as f:
        f.write("      <K> {0:.14e} </K>\n".format(K))
        f.write("      <G> {0:.14e} </G>\n".format(G))
        f.write("      <Y0> {0:.14e} </Y0>\n".format(Y))

    #               time   e11         e22    e33
    strain_table = [[0.0,  0.0,        0.0,   0.0],
                    [1.0, -0.003,     -0.003, 0.006],
                    [2.0, -0.0103923,  0.0,   0.0103923]]

    ##############################################

    N = 500  # number of interpolation points
    expanded = [[_] for _ in strain_table[0]]
    for idx in range(0, len(strain_table) - 1):
        for jdx in range(0, len(strain_table[0])):
            start = strain_table[idx][jdx]
            end = strain_table[idx + 1][jdx]
            expanded[jdx] = expanded[jdx] + list(numpy.linspace(start, end, N))[1:]

    flfmt = lambda x: "{0:20.10e}".format(x)
    strfmt = lambda x: "{0:>20s}".format(x)
    with open(testname + "_analytical.out", 'w') as f:
        headers = ["TIME", "STRAIN_XX", "STRAIN_YY", "STRAIN_ZZ",
                           "STRESS_XX", "STRESS_YY", "STRESS_ZZ"]
        f.write("".join([strfmt(_) for _ in headers]) + "\n")


        for idx in range(0, len(expanded[0])):
            t = expanded[0][idx]
            e1 = expanded[1][idx]
            e2 = expanded[2][idx]
            e3 = expanded[3][idx]

            sig = get_stress(t)
            sig11, sig22, sig33, sig12, sig23, sig13 = sig

            f.write("".join(flfmt(_) for _ in [t, e1, e2, e3, sig11, sig22, sig33]) + "\n")

    with open("base.exdiff", 'w') as f:
        f.write('<ExDiff ftol="1.0e-2" dtol="5.0e-3">\n')
        f.write('<Variable name="TIME"/>\n')
        f.write('<Variable name="STRESS_XX"/>\n')
        f.write('<Variable name="STRESS_YY"/>\n')
        f.write('<Variable name="STRESS_ZZ"/>\n')
        f.write('<Variable name="STRESS_XY"/>\n')
        f.write('<Variable name="STRESS_YZ"/>\n')
        f.write('<Variable name="STRESS_XZ"/>\n')
        f.write('<Variable name="STRAIN_XX"/>\n')
        f.write('<Variable name="STRAIN_YY"/>\n')
        f.write('<Variable name="STRAIN_ZZ"/>\n')
        f.write('<Variable name="STRAIN_XY"/>\n')
        f.write('<Variable name="STRAIN_YZ"/>\n')
        f.write('<Variable name="STRAIN_XZ"/>\n')
        f.write('</ExDiff>\n')
