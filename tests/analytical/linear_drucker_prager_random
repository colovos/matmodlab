#!/usr/bin/env python
import os
import random
import numpy as np

I = np.array([1.0, 1.0, 1.0, 0.0, 0.0, 0.0])
testname = os.path.splitext(os.path.basename(__file__))[0]

def iso(A):
    return np.sum(A[:3]) / 3.0 * I

def dev(A):
    return A - iso(A)

def mag(A):
    return np.sqrt(np.dot(A[:3], A[:3]) + 2.0 * np.dot(A[3:], A[3:]))

def unit(A):
    return A / mag(A)

def generate_unit_strain(A1, A4):
    # Generate a random strain deviator
    straingen = lambda: random.uniform(-1, 1)
    #devstrain = np.array([straingen(), straingen(), straingen(),
    #                      straingen(), straingen(), straingen()])
    devstrain = np.array([straingen(), straingen(), straingen(),
                          0., 0., 0.])
    while mag(dev(devstrain)) == 0.0:
        devstrain = np.array([straingen(), straingen(), straingen(),
                              0., 0., 0.])

    snorm = unit(dev(devstrain))
    return (np.sqrt(2.0) * A4 * I + snorm) / np.sqrt(6.0 * A4 ** 2 + 1.0)



if __name__ == '__main__':
    print("===== Starting processing")

    # poisson_ratio and young's modulus
    nu = random.uniform(-1.0 + 1.0e-5, 0.5 - 1.0e-5)
    E = max(1.0, 10 ** random.uniform(0.0, 12.0))

    # K and G are used for parameterization
    K = E / (3.0 * (1.0 - 2.0 * nu))
    G = E / (2.0 * (1.0 + nu))

    # LAM is used for computation
    LAM = E * nu / ((1.0 + nu) * (1.0 - 2.0 * nu))

    A1 = 2.0 * G * random.uniform(0.0001, 0.5)
    A4 = np.tan(random.uniform(np.pi / 100.0, np.pi / 2.1))

    # Write the parameters file
    print("===== Start writing parameters file")
    with open(testname + "_parameters.txt", 'w') as f:
        f.write("      <!--\n")
        f.write("       E  = {0:.14e}\n".format(E))
        f.write("       NU = {0:.14e}\n".format(nu))
        f.write("       LAM= {0:.14e}\n".format(LAM))
        f.write("      -->\n")
        f.write("      <K> {0:.14e} </K>\n".format(K))
        f.write("      <G> {0:.14e} </G>\n".format(G))
        f.write("      <A1> {0:.14e} </A1>\n".format(A1))
        f.write("      <A4> {0:.14e} </A4>\n".format(A4))
    print("===== End writing parameters file")

    strain = generate_unit_strain(A1, A4)
    straindevmag = mag(dev(strain))

    # Figure out how much strain we'll need to achieve yield
    fac = A1 / (3.0 * K * A4 * np.sum(strain[:3]) + np.sqrt(2.0) * G * straindevmag)

    # here we have our final strain that should just barely achieve yield
    strain = fac * strain
    print(strain)

    #                         e11  e22  e33  e12  e13  e23
    strain_table = [np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
                    strain,
                    2.0 * strain]

    flfmt = lambda x: "{0:20.10e}".format(x)
    strfmt = lambda x: "{0:>20s}".format(x)
    print("===== Start writing the strain table")
    with open(testname + "_straintable.dat", 'w') as f:
        for t, leg in enumerate(strain_table):
            f.write(flfmt(t) + "".join([flfmt(_) for _ in leg]) + "\n")
    print("===== End writing the strain table")

    ##############################################

    print("===== Start writing the analytical solution")
    with open(testname + "_analytical.dat", 'w') as f:
        headers = ["TIME", "STRAIN_XX", "STRAIN_YY", "STRAIN_ZZ",
                           "STRAIN_XY", "STRAIN_YZ", "STRAIN_XZ",
                           "STRESS_XX", "STRESS_YY", "STRESS_ZZ",
                           "STRESS_XY", "STRESS_YZ", "STRESS_XZ"]
        f.write("".join([strfmt(_) for _ in headers]) + "\n")

        strain = strain_table[1]
        stress = 3.0 * K * iso(strain) + 2.0 * G * dev(strain)

        line = (flfmt(0.0) +  # time
                "".join([flfmt(_) for _ in strain_table[0]]) +  # strain
                "".join([flfmt(0.0) for _ in range(0, 6)]))   # stress
        f.write(line + '\n')

        line = (flfmt(1.0) +  # time
                "".join([flfmt(_) for _ in strain_table[1]]) +  # strain
                "".join([flfmt(_) for _ in stress]))   # stress
        f.write(line + '\n')

        # Stress stays constant while strain increases
        line = (flfmt(2.0) +  # time
                "".join([flfmt(_) for _ in strain_table[2]]) +  # strain
                "".join([flfmt(_) for _ in stress]))   # stress
        f.write(line + '\n')
    print("===== End writing the analytical solution")
